---
title: "Engaging & Reproducible Data Visualization"
subtitle: "<span style='font-size:1.5em;'>From Theory to Implementation with ggplot2</span><br><span style='font-weight:500;font-size:1.3em;'>Workflows: Functional Programing & Corporate Themes</span></span>"
author: "<b style='color:#28a87d;'><a href='https://www.cedricscherer.com'>Dr. Cédric Scherer</a></b>&ensp;**//**&ensp;RTG-UGI Workshop&ensp;**//**&ensp;October 2023"
format:
  revealjs:
    theme: slides.scss
    logo: img/logo.png
    footer: '**[Cédric Scherer](https://cedricscherer.com)** // Data Visualization & Information Design'
    transition: fade
    progress: true
    multiplex: false
    preview-links: true
    scrollable: false
    hide-inactive-cursor: true
    highlight-style: printing
    chalkboard:
      theme: whiteboard
      boardmarker-width: 4
      buttons: true
    pause: true
    mainfont: Asap SemiCondensed
editor: source
knitr:
  opts_chunk:
    dev: "ragg_png"
    retina: 3
    dpi: 200
execute:
  freeze: auto
  cache: true
  echo: true
  fig-width: 5
  fig-height: 6
---


## Setup

```{r}
#| label: prep
#| cache: false
library(ggplot2)
library(dplyr)

bikes <- readr::read_csv(
  here::here("data", "london-bikes-custom.csv"),
  col_types = "Dcfffilllddddc"
)

bikes$season <- forcats::fct_inorder(bikes$season)

theme_set(theme_light(base_size = 14, base_family = "Asap SemiCondensed"))

theme_update(
  panel.grid.minor = element_blank(),
  plot.title = element_text(face = "bold"),
  plot.title.position = "plot"
)
```


# Programming <br>with ggplot2


## Conditional Components

```{r}
#| label: conditional-components
#| eval: false
#| purl: false
#| code-line-numbers: "1|3,4,5|4"
smooth <- TRUE

ggplot(bikes, aes(x = temp, y = humidity)) +
  { if(smooth) geom_smooth(color = "red") } +
  geom_point(alpha = .5)
```


## Conditional Components

```{r}
#| label: conditional-components-1
#| fig-width: 8
#| fig-height: 5
#| fig-align: center
smooth <- TRUE

ggplot(bikes, aes(x = temp, y = humidity)) +
  { if(smooth) geom_smooth(color = "red") } +
  geom_point(alpha = .5)
```


## Conditional Components

```{r}
#| label: conditional-components-2
#| fig-width: 8
#| fig-height: 5
#| fig-align: center
#| code-line-numbers: "1"
smooth <- FALSE

ggplot(bikes, aes(x = temp, y = humidity)) +
  { if(smooth) geom_smooth(color = "red") } +
  geom_point(alpha = .5)
```


## Wrapper Functions for Plots

```{r}
#| label: conditional-components-function
#| code-line-numbers: "1,5|2,3,4"
draw_scatter <- function(smooth = TRUE) {
  ggplot(bikes, aes(x = temp, y = humidity)) +
    { if(smooth) geom_smooth(color = "red") } +
    geom_point(alpha = .5)
}
```


## Wrapper Functions for Plots

```{r}
#| label: conditional-components-function-plot-default
#| output-location: column
#| fig-width: 5
#| fig-height: 6
draw_scatter()
```


## Wrapper Functions for Plots

```{r}
#| label: conditional-components-function-plot-false
#| output-location: column
#| fig-width: 5
#| fig-height: 6
draw_scatter(smooth = FALSE)
```


## Components as Functions

```{r}
#| label: function-components
#| cache: false
#| code-line-numbers: "1,2,7|3,6|4,5"
geom_scatterfit <- function(pointsize = 1, pointalpha = 1, 
                            method = "lm", linecolor = "red", ...) {
  list(
    geom_point(size = pointsize, alpha = pointalpha, ...),
    geom_smooth(method = method, color = linecolor, ...)
  )
}
```


## Components as Functions

```{r}
#| label: function-components-defaults
#| output-location: column
#| fig-width: 5
#| fig-height: 6
#| code-line-numbers: "3"
ggplot(bikes,
       aes(x = humidity, y = count)) +
  geom_scatterfit()
```


## Components as Functions

```{r}
#| label: function-components-args
#| output-location: column
#| fig-width: 5
#| fig-height: 6
#| code-line-numbers: "4,5"
ggplot(bikes,
       aes(x = humidity, y = count)) +
  geom_scatterfit(
    color = "#28A87D", 
    linewidth = 3
  )
```


## Components as Functions

```{r}
#| label: function-components-custom
#| output-location: column
#| fig-width: 5
#| fig-height: 6
#| code-line-numbers: "1,2|4,5,6,7"
ggplot(diamonds, 
       aes(x = carat, y = price)) +
  geom_scatterfit(
    pointsize = .5, 
    pointalpha = .1,
    method = "gam",
    linecolor = "#EFAC00"
  )
```


## Components as Functions

```{r}
#| label: function-components-scales
#| cache: false
#| code-line-numbers: "1,14|2,13|3,4,5,6,7|8,9,10,11,12"
scales_log <- function(sides = "xy") {
  list(
    if(stringr::str_detect(sides, "x")) {
      scale_x_log10(
        breaks = c(10^(1:100)), labels = scales::label_log()
      )
    },
    if(stringr::str_detect(sides, "y")) {
      scale_y_log10(
        breaks = c(10^(1:100)), labels = scales::label_log()
      )
    }
  )
}
```


## Components as Functions

```{r}
#| label: function-components-scales-custom
#| output-location: column
#| fig-width: 5
#| fig-height: 6
#| code-line-numbers: "9"
ggplot(diamonds, 
       aes(x = carat, y = price)) +
  geom_scatterfit(
    pointsize = .5, 
    pointalpha = .1,
    method = "gam",
    linecolor = "#EFAC00"
  ) +
  scales_log(sides = "y")
```


## Iterative Graphics

```{r}
#| label: function-iterate-monthly
#| cache: false
#| code-line-numbers: "1,11|2,3,4|5,6,7,8,9|1,4,9"
trends_monthly <- function(grp = "January") {
  bikes |> 
    dplyr::mutate(month = lubridate::month(date, label = TRUE, abbr = FALSE)) |> 
    dplyr::filter(month %in% grp) |> 
    ggplot(aes(x = temp, y = count, color = day_night)) +
    geom_point(alpha = .2, show.legend = FALSE) +
    geom_smooth(se = FALSE) +
    scale_color_manual(values = c("#FFA200", "#757bc7")) +
    labs(title = grp, x = "Temperature", y = "Bike shares", color = NULL)
}
```


## Iterative Graphics

```{r}
#| label: function-iterate-monthly-july
#| cache: false
#| output-location: column
#| fig-width: 5
#| fig-height: 6
trends_monthly("July")
```


## Iterative Graphics

```{r}
#| label: function-iterate-monthly-ranges
#| cache: false
#| code-line-numbers: "8,9,10"
trends_monthly <- function(grp = "January") {
  bikes |> 
    dplyr::mutate(month = lubridate::month(date, label = TRUE, abbr = FALSE)) |> 
    dplyr::filter(month %in% grp) |> 
    ggplot(aes(x = temp, y = count, color = day_night)) +
    geom_point(alpha = .2, show.legend = FALSE) +
    geom_smooth(se = FALSE) +
    # keep axis ranges consistent
    scale_x_continuous(limits = range(bikes$temp)) +
    scale_y_continuous(limits = range(bikes$count)) +
    scale_color_manual(values = c("#FFA200", "#757bc7")) +
    labs(title = grp, x = "Temperature", y = "Bike shares", color = NULL)
}
```


## Iterative Graphics

```{r}
#| label: function-iterate-monthly-ranges-july
#| cache: false
#| output-location: column
#| fig-width: 5
#| fig-height: 6
trends_monthly("July")
```


## Iterative Graphics

```{r}
#| label: function-iterate-monthly-ranges-purrr
#| cache: false
#| eval: false
#| purl: false
plots <- purrr::map(month.name[1:12], trends_monthly) ## also: ~ trends_monthly(.x)
```


## Iterative Graphics

```{r}
#| label: function-iterate-monthly-ranges-purrr-single
#| cache: false
#| fig-width: 8
#| fig-height: 5
#| fig-align: center
#| code-line-numbers: "2"
plots <- purrr::map(month.name[1:12], trends_monthly) ## also: ~ trends_monthly(.x)
plots[[9]]
```


## Iterative Graphics

```{r}
#| label: function-iterate-monthly-ranges-wrap
#| cache: false
#| fig-width: 18
#| fig-height: 8.5
#| fig-align: center
#| code-line-numbers: "2"
plots <- purrr::map(month.name[1:12], trends_monthly) ## also: ~ trends_monthly(.x)
patchwork::wrap_plots(plots)
```


## Iterative Graphics

```{r}
#| label: function-density
#| cache: false
#| code-line-numbers: "1,11|2|3,4|5,6,7|8,9,10"
plot_density <- function(data, var, grp = "") {
  ggplot(data, aes(x = !!sym(var))) +
    geom_density(aes(fill = !!sym(grp)), position = "identity",
                 color = "grey30", alpha = .3) +
    coord_cartesian(expand = FALSE, clip = "off") +
    scale_y_continuous(labels = scales::label_number()) +
    scale_fill_brewer(palette = "Dark2", name = NULL) +
    theme(legend.position = "top")
}
```


## Iterative Graphics

```{r}
#| label: function-density-plot
#| cache: false
#| output-location: column
#| fig-width: 5
#| fig-height: 6
plot_density(
  bikes, "count"
)
```


## Iterative Graphics

```{r}
#| label: function-density-plot-grp
#| cache: false
#| fig-width: 14
#| fig-height: 6.5
#| fig-align: center
#| code-line-numbers: "1,2,3,4|2|3|5"
plots <- purrr::map(
  c("count", "temp", "humidity", "wind_speed"), 
  ~ plot_density(data = bikes, var = .x, grp = "day_night")
)
patchwork::wrap_plots(plots, nrow = 1)
```


## Iterative Graphics

```{r}
#| label: function-density-plot-midwest
#| cache: false
#| fig-width: 20
#| fig-height: 9
#| fig-align: center
#| code-line-numbers: "2|3|5"
plots <- purrr::map(
  names(dplyr::select(midwest, where(is.numeric))),
  ~plot_density(data = midwest, var = .x)
)
patchwork::wrap_plots(plots)
```


# Custom Themes


## Complete Themes: What's Inside?

```{r}
#| label: code-theme-grey
theme_grey
```


## Complete Themes: What's Inside?

```{r}
#| label: code-theme-minimal
theme_minimal
```


## Create a Custom Theme

```{r}
#| label: code-theme-asap
#| eval: false
#| code-line-numbers: "1,2,6|4,5"
theme_asap <- function(base_size = 13, base_family = "Asap SemiCondensed", 
                       base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  theme_minimal(base_size = base_size, base_family = base_family, 
                base_line_size = base_line_size, base_rect_size = base_rect_size) 
}
```


## Create a Custom Theme

```{r}
#| label: code-theme-asap-replace-blank
#| eval: false
#| code-line-numbers: "5|6,8|7"
theme_asap <- function(base_size = 13, base_family = "Asap SemiCondensed", 
                       base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  theme_minimal(base_size = base_size, base_family = base_family, 
                base_line_size = base_line_size, base_rect_size = base_rect_size)  %+replace%
    theme(
      # add your theme changes here
    )
}
```


## Create a Custom Theme

```{r}
#| label: code-theme-asap-replace-filled
#| cache: false
theme_asap <- function(base_size = 13, base_family = "Asap SemiCondensed", 
                       base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  theme_minimal(base_size = base_size, base_family = base_family, 
                base_line_size = base_line_size, base_rect_size = base_rect_size) %+replace%
    theme(
      plot.title = element_text(size = rel(1.3), margin = margin(b = base_size/2),
                                family = "Asap SemiCondensed Extrabold", hjust = 0),
      plot.title.position = "plot",
      plot.caption = element_text(color = "grey30", margin = margin(t = base_size),
                                  size = rel(0.8), hjust = 1, vjust = 1),
      plot.caption.position = "plot",
      axis.title.x = element_text(hjust = 0, vjust = 0, margin = margin(t = base_size/3)),
      axis.title.y = element_text(hjust = 1, vjust = 0, angle = 90, margin = margin(r = base_size/3)),
      panel.background = element_rect(fill = "white", color = "grey20"), 
      panel.border = element_rect(fill = NA, color = "grey20"), 
      plot.background = element_rect(fill = "grey85", color = NA), 
      legend.justification = "top",
      strip.text = element_text(size = rel(1.05), margin = margin(base_size/2, 0, base_size/2, 0)),
      panel.grid.minor = element_blank(), 
      complete = TRUE
    )
}
```


## Apply the Custom Theme

```{r}
#| label: apply-theme-ggobject
g <- 
  ggplot(bikes, aes(x = temp, y = count, color = day_night)) +
  geom_point(alpha = .3, size = 2) +
  scale_color_manual(values = c(day = "#FFA200", night = "#757BC7")) +
  theme_minimal(base_size = 14, base_family = "Asap SemiCondensed") +
  theme(panel.grid.minor = element_blank())
```


## Apply the Custom Theme

```{r}
#| label: apply-theme-asap-default
#| output-location: column
#| code-line-numbers: "2"
g + 
  theme_asap()
```


## Modify an Existing Theme

<br>
`⁠%+replace%`

> replaces the entire element; any element of a theme not specified in e2 will not be present in the resulting theme (i.e. NULL).<br>Thus this operator can be used to overwrite an entire theme.

::: fragment
<br>
`+`

> updates the elements of e1 that differ from elements specified (not NULL) in e2.<br>Thus this operator can be used to incrementally add or modify attributes of a ggplot theme.

:::


## Create a Custom Theme

```{r}
#| label: code-theme-asap-update
#| cache: false
#| code-line-numbers: "5|7,8,10,12,13"
theme_asap_plus <- function(base_size = 13, base_family = "Asap SemiCondensed", 
                            base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  theme_minimal(base_size = base_size, base_family = base_family, 
                base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme( 
      plot.title = element_text(size = rel(1.3), hjust = 0,
                                family = "Asap SemiCondensed Extrabold"),
      plot.title.position = "plot",
      plot.caption = element_text(color = "grey30", margin = margin(t = base_size)),
      plot.caption.position = "plot",
      axis.title.x = element_text(hjust = 0, margin = margin(t = base_size/3)),
      axis.title.y = element_text(hjust = 1, margin = margin(r = base_size/3)),
      panel.background = element_rect(fill = "white", color = "grey20"), 
      panel.border = element_rect(fill = NA, color = "grey20"), 
      plot.background = element_rect(fill = "grey85", color = NA), 
      legend.justification = "top",
      strip.text = element_text(size = rel(1.05), margin = margin(base_size/2, 0, base_size/2, 0)),
      panel.grid.minor = element_blank()
    )
}
```


## + versus %+replace%

```{r}
#| label: code-theme-asap-replace-non-complete
#| echo: false
#| cache: false
theme_asap_replace <- function(base_size = 13, base_family = "Asap SemiCondensed", 
                            base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  theme_minimal(base_size = base_size, base_family = base_family, 
                base_line_size = base_line_size, base_rect_size = base_rect_size) %+replace% 
    theme( 
      plot.title = element_text(size = rel(1.3), hjust = 0,
                                family = "Asap SemiCondensed Extrabold"),
      plot.title.position = "plot",
      plot.caption = element_text(color = "grey30", margin = margin(t = base_size)),
      plot.caption.position = "plot",
      axis.title.x = element_text(hjust = 0, margin = margin(t = base_size/3)),
      axis.title.y = element_text(hjust = 1, margin = margin(r = base_size/3)),
      panel.background = element_rect(fill = "white", color = "grey20"), 
      panel.border = element_rect(fill = NA, color = "grey20"), 
      plot.background = element_rect(fill = "grey85", color = NA), 
      legend.justification = "top",
      strip.text = element_text(size = rel(1.05), margin = margin(base_size/2, 0, base_size/2, 0)),
      panel.grid.minor = element_blank()
    )
}
```

::: {layout-ncol="2"}
```{r}
#| label: apply-theme-asap-plus
#| fig-width: 5.5
#| fig-height: 6
g + theme_asap_plus()
```

::: fragment
```{r}
#| label: apply-theme-asap-replace
#| fig-width: 5.5
#| fig-height: 6
g + theme_asap_replace()
```
:::
:::


## Modify the Custom Theme

```{r}
#| label: apply-theme-asap-modify-theme-elements
#| output-location: column
#| code-line-numbers: "3,4,5,6,7,8,9"
g + 
  theme_asap() +
  theme(
    legend.position = "top",
    plot.background = element_rect(
      fill = NA, color = NA
    )
  )
```


## Modify the Custom Theme

```{r}
#| label: apply-theme-asap-modify-base-settings
#| output-location: column
#| code-line-numbers: "3|4"
g + 
  theme_asap(
    base_size = 9,
    base_family = "Hepta Slab"
  )
```


## Modify the Custom Theme

```{r}
#| label: apply-theme-asap-modify-title-face
#| output-location: column
#| code-line-numbers: "6,7,8,9,10"
g + 
  theme_asap(
    base_size = 9,
    base_family = "Hepta Slab"
  ) +
  theme(
    plot.title = element_text(
      family = "Hepta Slab"
    )
  )
```


## Create a Custom Theme

```{r}
#| label: code-theme-asap-title-family
#| eval: false
#| purl: false
#| code-line-numbers: "1,2|5,6,7,8,9|14,15"
theme_asap_title <- function(base_size = 13, base_family = "Asap SemiCondensed", 
                             title_family = "Asap SemiCondensed Extrabold",
                             base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  if (title_family == "Asap SemiCondensed Extrabold") {
    register_variant(name = "Asap SemiCondensed Extrabold",
                     family = "Asap SemiCondensed",
                     weight = "ultrabold")
  }
  
  theme_minimal(base_size = base_size, base_family = base_family, 
                base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme(
      plot.title = element_text(size = rel(1.3), hjust = 0, family = title_family),
      # fill in other theme adjustments here
    )
}
```

```{r}
#| label: code-theme-asap-title-family-full
#| echo: false
#| cache: false
theme_asap_title <- function(base_size = 13, base_family = "Asap SemiCondensed", 
                             title_family = "Asap SemiCondensed Extrabold",
                             base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  if (title_family == "Asap SemiCondensed Extrabold") {
    register_variant(name = "Asap SemiCondensed Extrabold",
                     family = "Asap SemiCondensed",
                     weight = "ultrabold")
  }
  
  theme_minimal(base_size = base_size, base_family = base_family, 
                base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme(
      plot.title = element_text(size = rel(1.3), hjust = 0, family = title_family),
      plot.title.position = "plot",
      plot.caption = element_text(color = "grey30", margin = margin(t = base_size)),
      plot.caption.position = "plot",
      axis.title.x = element_text(hjust = 0, margin = margin(t = base_size/3)),
      axis.title.y = element_text(hjust = 1, margin = margin(r = base_size/3)),
      panel.background = element_rect(fill = "white", color = "grey20"), 
      panel.border = element_rect(fill = NA, color = "grey20"), 
      plot.background = element_rect(fill = "grey85", color = NA), 
      legend.justification = "top",
      strip.text = element_text(size = rel(1.05), margin = margin(base_size/2, 0, base_size/2, 0)),
      panel.grid.minor = element_blank()
    )
}
```


## Apply the Custom Theme

```{r}
#| label: apply-theme-custom-title-family
#| output-location: column
#| code-line-numbers: "5"
g +
  theme_asap_title(
    base_size = 9,
    base_family = "Hepta Slab",
    title_family = "Hepta Slab"
  )
```


## Advanced Font Handling (for Themes)

```{r}
#| label: code-theme-font-handling
#| cache: false
#| code-line-numbers: "1,2|4|6,7,8,9,10,11,12|13,14,15,16|18,19,20,21,22|25,26,27,28,29,30,31,32,33,34,35,36,37|26,27,28,29|30,31,32,33,34,35,36|39,42"
theme_fonts <- function(base_size = 12, base_line_size = base_size/22, 
                        base_rect_size = base_size/22) {
  
  unavailable <- vector("character")
  
  if (sum(grepl("Hepta Slab", systemfonts::system_fonts()$family)) > 0) {
    systemfonts::register_variant(
      name = "Hepta Slab Extrabold",
      family = "Hepta Slab",
      weight = "ultrabold"
    )
    title_family <- "Hepta Slab Extrabold"
  } else {
    title_family <- ""
    unavailable <- c(unavailable, "Hepta Slab")
  }
  
  if (sum(grepl("Spline Sans", systemfonts::system_fonts()$family)) > 0) {
    base_family <- "Spline Sans"
  } else {
    base_family <- ""
    unavailable <- c(unavailable, "Spline Sans")
  }
  
  if (length(unavailable) > 0) {
    unavailable <- data.frame(
      name = unavailable, 
      url = paste0("https://fonts.google.com/specimen/", sub(" ", "+", unavailable))
    )
    message(paste(
      "Using system default typefaces.", 
      "For proper use, please install the following typeface(s):",
      paste0("  - ", unavailable$name, ": ", unavailable$url, collapse = "\n"),
      "Then restart your R session.",
      sep = "\n"
    ))
  }
  
  theme_asap(base_size = base_size, base_family = base_family, 
             base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme(
      plot.title = element_text(size = rel(1.3), hjust = 0, family = title_family)
    )
}
```


## Apply the Custom Theme

```{r}
#| label: theme-fonts-message
#| eval: false
#| purl: false
g + theme_fonts()
```

<code style='color:#663399;font-size:16pt;'>Using system default typefaces.<br>For proper use, please install the following typeface(s):<br>&emsp;- Hepta Slab: https://fonts.google.com/specimen/Hepta+Slab<br>&emsp;- Spline: https://fonts.google.com/specimen/Spline+Sans<br>Then restart your R session.</code>


## Apply the Custom Theme

```{r}
#| label: theme-fonts-show
#| output-location: column
g + theme_fonts()
```


## Add More Arguments

::: incremental
-   turn grid lines on and off
-   define alternative styles
-   set a tabular fonts for axis and legend text
-   adjust legend position
-   add/remove plot margin
-   control rendering of text elements
-   ...
:::

. . .

<b class='simple-highlight-grn' style='font-size:2.6rem;'>Pro: Users don't have to use `theme()`.</b>

. . .

<b class='simple-highlight-ylw' style='font-size:2.6rem;'>Con: Users don't have to use `theme()`.</b>


## Add More Arguments

-   ***turn grid lines on and off***
-   define alternative styles
-   set a tabular fonts for axis and legend text
-   adjust legend position
-   add/remove plot margin
-   control rendering of text elements
-   ...

<b class='simple-highlight-grn' style='font-size:2.6rem;'>Pro: Users don't have to use `theme()`.</b>
  
<b class='simple-highlight-ylw' style='font-size:2.6rem;'>Con: Users don't have to use `theme()`.</b>


## Add More Arguments

```{r}
#| label: code-theme-asap-grid
#| eval: false
#| purl: false
#| code-line-numbers: "1|3|7,8,9,10|13,14,15,16,17|18,19,20,21,22|24"
theme_asap_grid <- function(base_size = 13, base_family = "Asap SemiCondensed", grid = "xy", 
                            base_line_size = base_size/22, base_rect_size = base_size/22) {
  out <- 
    theme_minimal(base_size = base_size, base_family = base_family, 
                  base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme(
      panel.grid.major = element_blank(),
      axis.ticks = element_line(color = "grey20"),
      axis.ticks.length = unit(base_size/2, "pt"),
      # fill in other theme adjustments here
    )
  
  if (stringr::str_detect(grid, "x|X")) {
    out <- out + theme(panel.grid.major.x = element_line(color = "grey87"),
                       axis.ticks.x = element_blank(),
                       axis.ticks.length.x = unit(base_size/6, "pt"))
  }
  if (stringr::str_detect(grid, "y|Y")) {
    out <- out + theme(panel.grid.major.y = element_line(color = "grey87"),
                       axis.ticks.y = element_blank(),
                       axis.ticks.length.y = unit(base_size/4, "pt"))
  }
  
  return(out)
}
```

```{r}
#| label: code-theme-asap-grid-full
#| echo: false
#| cache: false
theme_asap_grid <- function(base_size = 13, base_family = "Asap SemiCondensed", grid = "xy", 
                            base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  out <- 
    theme_minimal(base_size = base_size, base_family = base_family, 
                  base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme(
      plot.title = element_text(size = rel(1.3), margin = margin(b = base_size/2),
                                family = "Asap SemiCondensed Extrabold", hjust = 0), 
      plot.title.position = "plot",
      plot.caption = element_text(color = "grey30", margin = margin(t = base_size)),
      plot.caption.position = "plot",
      axis.title.x = element_text(hjust = 0, margin = margin(t = base_size/3)),
      axis.title.y = element_text(hjust = 1, margin = margin(r = base_size/3)),
      panel.background = element_rect(fill = "white", color = "grey20"), 
      panel.border = element_rect(fill = NA, color = "grey20"), 
      plot.background = element_rect(fill = "grey85", color = NA), 
      legend.justification = "top",
      strip.text = element_text(size = rel(1.05), margin = margin(base_size/2, 0, base_size/2, 0)),
      panel.grid.minor = element_blank(),
      panel.grid.major = element_blank(),
      axis.ticks = element_line(color = "grey20"),
      axis.ticks.length = unit(base_size/2, "pt")
    )
  
  if (stringr::str_detect(grid, "x|X")) {
    out <- out + theme(panel.grid.major.x = element_line(color = "grey87"),
                       axis.ticks.x = element_blank(),
                       axis.ticks.length.x = unit(base_line_size, "pt"))
  }
  if (stringr::str_detect(grid, "y|Y")) {
    out <- out + theme(panel.grid.major.y = element_line(color = "grey87"),
                       axis.ticks.y = element_blank(),
                       axis.ticks.length.y = unit(base_line_size, "pt"))
  }
  
  return(out)
}
```


## Apply the Custom Theme

```{r}
#| label: apply-theme-custom-grid-y
#| output-location: column
#| code-line-numbers: "2,3,4"
g + 
  theme_asap_grid(
    grid = "y"
  )
```


## Apply the Custom Theme

::: {layout-ncol="2"}
```{r}
#| label: apply-theme-custom-grid-xy
#| fig-width: 5.5
#| fig-height: 6
g + theme_asap_grid()
```

```{r}
#| label: apply-theme-custom-grid-none
#| fig-width: 5.5
#| fig-height: 6
g + theme_asap_grid(grid = "none")
```
:::


## Apply the Custom Theme

```{r}
#| label: apply-theme-custom-grid-all
#| output-location: column
#| code-line-numbers: "3"
g + 
  theme_asap_grid(
    grid = "all"
  )
```


## Add Checks to the Custom Theme

```{r}
#| label: code-theme-asap-grid-check
#| eval: false
#| purl: false
#| code-line-numbers: "4"
theme_asap_grid <- function(base_size = 13, base_family = "Asap SemiCondensed", grid = "xy", 
                            base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  if(!stringr::str_detect(grid, "none|x|X|y|Y")) stop('grid must be a character: "none" or any combination of "X", "Y", "x" and "y".')
  
  out <- 
    theme_minimal(base_size = base_size, base_family = base_family, 
                  base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme(
      panel.grid.major = element_blank(),
      axis.ticks = element_line(color = "grey20"),
      axis.ticks.length = unit(base_size/2, "pt"),
      # fill in other theme adjustments here
    )
  
  if (stringr::str_detect(grid, "x|X")) {
    out <- out + theme(panel.grid.major.x = element_line(color = "grey87"),
                       axis.ticks.x = element_blank(),
                       axis.ticks.length.x = unit(base_size/6, "pt"))
  }
  if (stringr::str_detect(grid, "y|Y")) {
    out <- out + theme(panel.grid.major.y = element_line(color = "grey87"),
                       axis.ticks.y = element_blank(),
                       axis.ticks.length.y = unit(base_size/4, "pt"))
  }
  
  return(out)
}
```

```{r}
#| label: code-theme-asap-grid-check-full
#| echo: false
#| cache: false
theme_asap_grid <- function(base_size = 13, base_family = "Asap SemiCondensed", grid = "xy", 
                            base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  if(!stringr::str_detect(grid, "none|x|X|y|Y")) stop('grid must be a character: "none" or any combination of "X", "Y", "x" and "y".')
  
  out <- 
    theme_minimal(base_size = base_size, base_family = base_family, 
                  base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme(
      plot.title = element_text(size = rel(1.3), margin = margin(b = base_size/2),
                                family = "Asap SemiCondensed Extrabold", hjust = 0), 
      plot.title.position = "plot",
      plot.caption = element_text(color = "grey30", margin = margin(t = base_size)),
      plot.caption.position = "plot",
      axis.title.x = element_text(hjust = 0, margin = margin(t = base_size/3)),
      axis.title.y = element_text(hjust = 1, margin = margin(r = base_size/3)),
      panel.background = element_rect(fill = "white", color = "grey20"), 
      panel.border = element_rect(fill = NA, color = "grey20"), 
      plot.background = element_rect(fill = "grey85", color = NA), 
      legend.justification = "top",
      strip.text = element_text(size = rel(1.05), margin = margin(base_size/2, 0, base_size/2, 0)),
      panel.grid.minor = element_blank(),
      panel.grid.major = element_blank(),
      axis.ticks = element_line(color = "grey20"),
      axis.ticks.length = unit(base_size/2, "pt")
    )
  
  if (stringr::str_detect(grid, "x|X")) {
    out <- out + theme(panel.grid.major.x = element_line(color = "grey87"),
                       axis.ticks.x = element_blank(),
                       axis.ticks.length.x = unit(base_line_size, "pt"))
  }
  if (stringr::str_detect(grid, "y|Y")) {
    out <- out + theme(panel.grid.major.y = element_line(color = "grey87"),
                       axis.ticks.y = element_blank(),
                       axis.ticks.length.y = unit(base_line_size, "pt"))
  }
  
  return(out)
}
```


## Apply the Custom Theme

```{r}
#| label: apply-theme-custom-grid-all-check
#| eval: false
#| code-line-numbers: "3"
g + 
  theme_asap_grid(
    grid = "all"
  )
```

<code style='color:red;font-size:16pt;'>Error in theme_asap_grid(grid = "all") :<br>grid must be a character: "none" or any combination of "X", "Y", "x" and "y".</code>



## <b style='color:#663399;'>Recap</b>

::: recap
::: incremental
-   define conditional components, custom layers and functions to generate plots more efficiently and to iterate over multiple inputs
-   use `patchwork::wrap_plots()` to create grids from plot lists
-   apply complete themes via `theme_*()` and modify theme defaults via `theme()`
-   change the appearance for all plots with `theme_set()` and `theme_update()`
-   `{systemfonts}` allows to use non-default typefaces and register font variants
-   use the source code of complete themes to create a custom theme
-   add additional arguments to allow for different styles and settings
:::
:::



# Exercise



## Exercise 1

::: question
-  **Create a function that plots the famous Gapminder chart, highlighting one of the continents.**
   -  Extend the following code in to annotate a continent your choice of with {ggforce}.
   -  Turn the code into a function with the utility to annotate any continent.
   -  Optional: Create a second function to highlight a country.
:::


--------------------------------------------------------------------------------

```{r}
#| label: gapminder-plot-template
#| eval: false
#| purl: false
#| code-line-numbers: "1|3|5|6,7,8|9,10,11,12|13,14,15,16,17|18|19,20"
# install.packages("gapminder")

(gm2007 <- filter(gapminder::gapminder, year == 2007))

ggplot(gm2007, aes(x = gdpPercap, y = lifeExp)) +
  geom_point( 
    aes(size = pop), alpha = .5
  ) +
  scale_x_log10(
    breaks = c(500, 2000, 8000, 32000),
    labels = scales::label_dollar(accuracy = 1)
  ) +
  scale_size(
    range = c(1, 12), name = "Population:", 
    breaks = c(10, 100, 1000)*1000000, 
    labels = scales::label_comma(scale = 1 / 10^6, suffix = "M")
  ) +
  labs(x = "GDP per capita", y = "Life expectancy") +
  theme_minimal(base_family = "Asap SemiCondensed") +
  theme(panel.grid.minor = element_blank())
```

--------------------------------------------------------------------------------

```{r}
#| label: gapminder-plot-template
#| echo: false
#| purl: false
```



## Exercise 2

::: question
-   **Create a corporate or funny custom theme.**
    -   Make use of an existing complete theme to get started.
    -   Pick a non-default font (or multiple) for your theme.
    -   Optional: Try working with font variants.
    -   Optional: Add other helpful arguments to your `theme_*` function.
:::


## Exercise 2

::: question
-   **Create a corporate or funny custom theme.**
    -   Make use of an existing complete theme to get started.
    -   Pick a non-default font (or multiple).
    -   Optional: Try working with font variants.
    -   Optional: Add other helpful arguments to your `theme_*` function.
-   **Showcase your theme using some example graphics.**
    -   Save the plots to disk and share them with the group.
    -   Did you add some additional arguments?<br>Feel free to share your thoughts on "why" and "how".
:::



# Solution Exercise 1 {background-color="#e6d9f2"}



## Gapminder Bubble Chart

```{r}
#| label: exercise-1-2-gapminder-0-template
#| eval: false
#| purl: false
#| cache: false
#| code-line-numbers: "1|3,4,5|7|9,10,11,12|13,14,15,16|17,18,19,20,21|22|23,24"
# install.packages("gapminder")

library(gapminder)
library(dplyr)
library(ggplot2)

gm2007 <- filter(gapminder, year == 2007)

ggplot(gm2007, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(
    aes(size = pop), alpha = .5
  ) +
  scale_x_log10(
    breaks = c(500, 2000, 8000, 32000),
    labels = scales::label_dollar(accuracy = 1)
  ) +
  scale_size(
    range = c(1, 12), name = "Population:", 
    breaks = c(10, 100, 1000)*1000000, 
    labels = scales::label_comma(scale = 1 / 10^6, suffix = "M")
  ) +
  labs(x = "GDP per capita", y = "Life expectancy") +
  theme_minimal(base_family = "Asap SemiCondensed", base_size = 15) +
  theme(panel.grid.minor = element_blank())
```

--------------------------------------------------------------------------------

```{r}
#| label: exercise-1-2-gapminder-0-template
#| echo: false
```


## Annotate Continents

```{r}
#| label: exercise-1-2-gapminder-1-geom-hull
#| eval: false
#| purl: false
#| code-line-numbers: "2,3,4|5,6,7,8|6|9,10,11,12,13|10"
ggplot(gm2007, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(
    aes(size = pop), alpha = .5, color = "grey60"
  ) +
  geom_point( 
    data = filter(gm2007, continent == "Americas"),
    aes(size = pop), shape = 1, stroke = .7
  ) +
  ggforce::geom_mark_hull(
    aes(label = continent, filter = continent == "Americas"),
    expand = unit(10, "pt"), con.cap = unit(1, "mm"),
    label.family = "Asap SemiCondensed", label.fontsize = 15
  ) +
  scale_x_log10(
    breaks = c(500, 2000, 8000, 32000),
    labels = scales::label_dollar(accuracy = 1)
  ) +
  scale_size(
    range = c(1, 12), name = "Population:",
    breaks = c(10, 100, 1000)*1000000,
    labels = scales::label_comma(scale = 1 / 10^6, suffix = "M")
  ) +
  labs(x = "GDP per capita", y = "Life expectancy") +
  theme_minimal(base_family = "Asap SemiCondensed", base_size = 15) +
  theme(panel.grid.minor = element_blank())
```

--------------------------------------------------------------------------------

```{r}
#| label: exercise-1-2-gapminder-1-geom-hull
#| echo: false
```


## Function to Highlight a Continent

```{r}
#| label: exercise-1-2-gapminder-2-function-continent
#| cache: false
#| code-line-numbers: "1,29|8,12"
draw_gp_continent <- function(grp) {
  
  ggplot(gm2007, aes(x = gdpPercap, y = lifeExp)) + 
    geom_point( 
      aes(size = pop), alpha = .5, color = "grey60"
    ) +
    geom_point( 
      data = filter(gm2007, continent == grp),
      aes(size = pop), shape = 1, stroke = .7
    ) +
    ggforce::geom_mark_hull(
      aes(label = continent, filter = continent == grp),
      expand = unit(10, "pt"), con.cap = unit(1, "mm"),
      label.family = "Asap SemiCondensed", label.fontsize = 15
    ) +
    scale_x_log10(
      breaks = c(500, 2000, 8000, 32000),
      labels = scales::label_dollar(accuracy = 1)
    ) +
    scale_size(
      range = c(1, 12), name = "Population:", 
      breaks = c(10, 100, 1000)*1000000, 
      labels = scales::label_comma(scale = 1 / 10^6, suffix = "M")
    ) +
    labs(x = "GDP per capita", y = "Life expectancy") +
    theme_minimal(base_family = "Asap SemiCondensed", base_size = 15) +
    theme(panel.grid.minor = element_blank())
  
}
```


--------------------------------------------------------------------------------

```{r}
#| label: exercise-1-2-gapminder-3-example-americas
draw_gp_continent("Americas")
```


--------------------------------------------------------------------------------

```{r}
#| label: exercise-1-2-gapminder-4-example-africa
draw_gp_continent("Africa")
```


--------------------------------------------------------------------------------

```{r}
#| label: exercise-1-2-gapminder-5-example-europe
draw_gp_continent("Europe")
```


## Function to Highlight a Country

```{r}
#| label: exercise-1-2-gapminder-6-function-country
#| cache: false
#| code-line-numbers: "1,30|7,8,9,10,11,12|8|9,10|13,14,15,16|14|15"
draw_gp_country <- function(grp) {
  
  ggplot(gm2007, aes(x = gdpPercap, y = lifeExp)) + 
    geom_point( 
      aes(size = pop), alpha = .5, color = "grey60"
    ) +
    ggforce::geom_mark_circle(
      aes(label = country, filter = country == grp),
      expand = unit(15, "pt"), con.cap = unit(0, "mm"),
      # expand = unit(0, "pt"), con.cap = unit(0, "mm"),
      label.family = "Asap SemiCondensed", label.fontsize = 15
    ) +
    geom_point( 
      data = filter(gm2007, country == grp),
      aes(size = pop), color = "#9C55E3", show.legend = FALSE
    ) +
    scale_x_log10(
      breaks = c(500, 2000, 8000, 32000),
      labels = scales::label_dollar(accuracy = 1)
    ) +
    scale_size(
      range = c(1, 12), name = "Population:", 
      breaks = c(10, 100, 1000)*1000000, 
      labels = scales::label_comma(scale = 1 / 10^6, suffix = "M")
    ) +
    labs(x = "GDP per capita", y = "Life expectancy") +
    theme_minimal(base_family = "Asap SemiCondensed", base_size = 15) +
    theme(panel.grid.minor = element_blank())
  
}
```


--------------------------------------------------------------------------------

```{r}
#| label: exercise-1-2-gapminder-7-example-usa
draw_gp_country("United States")
```


--------------------------------------------------------------------------------

```{r}
#| label: exercise-1-2-gapminder-8-example-germany
draw_gp_country("Germany")
```


--------------------------------------------------------------------------------

```{r}
#| label: exercise-1-2-gapminder-9-example-india
draw_gp_country("India")
```


--------------------------------------------------------------------------------

```{r}
#| label: exercise-1-2-gapminder-10-example-zambia
draw_gp_country("Zambia")
```



# Solution Exercise 2 {background-color="#e6d9f2"}



## Exercise 2

::: question
-   **Create a corporate or funny custom theme.**
    -   Make use of an existing complete theme to get started.
    -   Pick a non-default font (or multiple).
    -   Optional: Try working with font variants.
    -   Optional: Add other helpful arguments to your `theme_*` function.
-   **Showcase your theme using some example graphics.**
    -   Save the plots to disk and share them with the group.
    -   Did you add some additional arguments?<br>Feel free to share your thoughts on "why" and "how".
:::



## Preparation

```{r}
#| label: preparation
library(ggplot2)
```


## Custom Theme

```{r}
#| label: code-theme-bulls
#| cache: false
theme_bulls <- function(base_size = 18, base_family = "College Block", 
                        base_line_size = base_size/22, base_rect_size = base_size/22) {
  
  theme_bw(base_size = base_size, base_family = base_family, 
           base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme( 
      plot.title = element_text(size = rel(2), color = "white", margin = margin(b = base_size/2)),
      plot.subtitle = element_text(margin = margin(t = -base_size/4, b = base_size/2)),
      plot.caption = element_text(color = "black", size = rel(.7), hjust = 0),
      plot.title.position = "plot",
      plot.caption.position = "plot",
      axis.title = element_text(color = "white"),
      axis.title.x = element_text(hjust = 1, margin = margin(t = base_size/2)),
      axis.title.y = element_text(hjust = 1, margin = margin(r = base_size/2)),
      axis.text = element_text(color = "black"),
      axis.ticks = element_line(color = "black"),
      panel.background = element_rect(fill = "#dfbb85", color = "white", linewidth = base_size/4), 
      panel.border = element_rect(fill = NA, color = "black", linewidth = base_size/10), 
      plot.background = element_rect(fill = "#CE1141", color = "black", linewidth = base_size/4), 
      legend.background = element_rect(fill = "transparent", color = "black"),
      legend.justification = "top",
      strip.text = element_text(size = rel(1.25), color = "white"),
      panel.grid.major = element_line(color = "white"),
      panel.grid.minor = element_blank(),
      plot.margin = margin(rep(base_size, 4))
    )
}
```


## Apply Theme

```{r}
#| label: plot-theme-bulls
#| eval: false
data <- readr::read_csv("https://query.data.world/s/cejs4o4gdt6autofsse7whhqnnmaii?dws=00000")

ggplot(filter(data, Team == "Chicago"), aes(x = Pts, y = Reb)) +
  geom_point(shape = "🏀", size = 5) +
  labs(title = "Let's Go Bulls! ⛹️️", x = "Points scored", y = "Rebounds", 
       caption = "Data: hoopsstats.com") +
  theme_bulls()
```


--------------------------------------------------------------------------------

```{r}
#| label: plot-theme-bulls
#| echo: false
#| fig-align: center
```



## Custom Theme

```{r}
#| label: code-theme-nba
#| cache: false
#| code-line-numbers: "3|5|7,8,9,10,11,12,13,14,15,16,17,18,19|20|25,26,27,30,33,34,36,37,40"
theme_nba <- function(base_size = 18, base_family = "College Block", 
                      base_line_size = base_size/22, base_rect_size = base_size/22,
                      team = "Bulls") {
  
  if(!team %in% c("Bulls", "Lakers", "Nuggets", "Celtics", "Knicks", "Heat", "Hornets", "Sixers", "Timberwolves", "Pelicans", "Suns")) stop('team should be one of "Bulls", "Lakers", "Nuggets", "Celtics", "Knicks", "Heat", "Hornets", "Sixers", "Timberwolves", "Pelicans", or "Suns".')
  
  colors <- data.frame(
    Bulls = c("#CE1141", "#FFFFFF", "#000000"),
    Lakers = c("#552583", "#FDB927", "#000000"),
    Nuggets = c("#8B2131", "#FEC524", "#0E2240"),
    Celtics = c("#007A33", "#FFFFFF", "#BA9653"),
    Knicks = c("#006BB6", "#F58426", "#BEC0C2"),
    Heat = c("#000000", "#F9A01B", "#98002E"),
    Hornets = c("#1D1160", "#A1A1A4", "#00788C"),
    Sixers = c("#006BB6", "#ED174C", "#002B5C"),
    Timberwolves = c("#0C2340", "#78BE20", "#9EA2A2"),
    Pelicans = c("#0C2340", "#C8102E", "#85714D"),
    Suns = c("#1D1160", "#E56020", "#63727A")
  )
  colors <- unname(colors[, team])
  
  theme_minimal(base_size = base_size, base_family = base_family, 
           base_line_size = base_line_size, base_rect_size = base_rect_size) + 
    theme( 
      plot.title = element_text(size = rel(2), color = colors[2], margin = margin(b = base_size/2)),
      plot.subtitle = element_text(color = colors[3], margin = margin(t = -base_size/4, b = base_size/2)),
      plot.caption = element_text(color = colors[3], size = rel(.7), hjust = 0),
      plot.title.position = "plot",
      plot.caption.position = "plot",
      axis.title = element_text(color = colors[2]),
      axis.title.x = element_text(hjust = 1, margin = margin(t = base_size/2)),
      axis.title.y = element_text(hjust = 1, margin = margin(r = base_size/2)),
      axis.text = element_text(color = colors[3]),
      axis.ticks = element_line(color = colors[3]),
      panel.background = element_rect(fill = "#dfbb85", color = "white", linewidth = base_size/4), 
      panel.border = element_rect(fill = NA, color = colors[3], linewidth = base_size/10), 
      plot.background = element_rect(fill = colors[1], color = colors[3], linewidth = base_size/4), 
      legend.background = element_rect(fill = "transparent", color = colors[3]),
      legend.justification = "top",
      strip.text = element_text(size = rel(1.25), color = colors[2]),
      panel.grid.major = element_line(color = "white"),
      panel.grid.minor = element_blank(),
      plot.margin = margin(rep(base_size, 4))
    )
}
```


--------------------------------------------------------------------------------

```{r}
#| label: plot-theme-nba-bulls
#| echo: false
#| fig-align: center
team <- "Chicago"
ggplot(filter(data, Year %in% c("2019-2020", "2020-2021", "2021-2022")), 
       aes(x = Pts, y = Reb)) +
  geom_point(aes(shape = Team == team, size = Team == team)) +
  facet_wrap(~ Year) +
  scale_shape_manual(values = c("⚫", "🏀"), guide = "none") +
  scale_size_manual(values = c(2, 7), guide = "none") +
  labs(title = "Let's Go Bulls! ⛹️️", x = "Points scored", y = "Rebounds", 
       caption = "Data: hoopsstats.com",
       subtitle = "Team statistics for the last 3 NBA seasons in comparison with all other teams.") +
  theme_nba(team = "Bulls")
```


--------------------------------------------------------------------------------

```{r}
#| label: plot-theme-nba-lakers
#| echo: false
#| fig-align: center
team <- "L.A.Lakers"
ggplot(filter(data, Year %in% c("2019-2020", "2020-2021", "2021-2022")), 
       aes(x = Pts, y = Reb)) +
  geom_point(aes(shape = Team == team, size = Team == team)) +
  facet_wrap(~ Year) +
  scale_shape_manual(values = c("⚫", "🏀"), guide = "none") +
  scale_size_manual(values = c(2, 7), guide = "none") +
  labs(title = "Let's Go Lakers! ⛹️️", x = "Points scored", y = "Rebounds", 
       caption = "Data: hoopsstats.com",
       subtitle = "Team statistics for the last 3 NBA seasons in comparison with all other teams.") +
  theme_nba(team = "Lakers")
```


--------------------------------------------------------------------------------

```{r}
#| label: plot-theme-nba-nuggets
#| echo: false
#| fig-align: center
team <- "Denver"
ggplot(filter(data, Year %in% c("2019-2020", "2020-2021", "2021-2022")), 
       aes(x = Pts, y = Reb)) +
  geom_point(aes(shape = Team == team, size = Team == team)) +
  facet_wrap(~ Year) +
  scale_shape_manual(values = c("⚫", "🏀"), guide = "none") +
  scale_size_manual(values = c(2, 7), guide = "none") +
  labs(title = "Let's Go Nuggets! ⛹️️", x = "Points scored", y = "Rebounds", 
       caption = "Data: hoopsstats.com",
       subtitle = "Team statistics for the last 3 NBA seasons in comparison with all other teams.") +
  theme_nba(team = "Nuggets")
```


--------------------------------------------------------------------------------

```{r}
#| label: plot-theme-nba-celtics
#| echo: false
#| fig-align: center
team <- "Boston"
ggplot(filter(data, Year %in% c("2019-2020", "2020-2021", "2021-2022")), 
       aes(x = Pts, y = Reb)) +
  geom_point(aes(shape = Team == team, size = Team == team)) +
  facet_wrap(~ Year) +
  scale_shape_manual(values = c("⚫", "🏀"), guide = "none") +
  scale_size_manual(values = c(2, 7), guide = "none") +
  labs(title = "Let's Go Celtics! ⛹️️", x = "Points scored", y = "Rebounds", 
       caption = "Data: hoopsstats.com",
       subtitle = "Team statistics for the last 3 NBA seasons in comparison with all other teams.") +
  theme_nba(team = "Celtics")
```


--------------------------------------------------------------------------------

```{r}
#| label: plot-theme-nba-knicks
#| echo: false
#| fig-align: center
team <- "New York"
ggplot(filter(data, Year %in% c("2019-2020", "2020-2021", "2021-2022")), 
       aes(x = Pts, y = Reb)) +
  geom_point(aes(shape = Team == team, size = Team == team)) +
  facet_wrap(~ Year) +
  scale_shape_manual(values = c("⚫", "🏀"), guide = "none") +
  scale_size_manual(values = c(2, 7), guide = "none") +
  labs(title = "Let's Go Knicks! ⛹️️", x = "Points scored", y = "Rebounds", 
       caption = "Data: hoopsstats.com",
       subtitle = "Team statistics for the last 3 NBA seasons in comparison with all other teams.") +
  theme_nba(team = "Knicks")
```


--------------------------------------------------------------------------------

```{r}
#| label: plot-theme-nba-miami
#| echo: false
#| fig-align: center
team <- "Miami"
ggplot(filter(data, Year %in% c("2019-2020", "2020-2021", "2021-2022")), 
       aes(x = Pts, y = Reb)) +
  geom_point(aes(shape = Team == team, size = Team == team)) +
  facet_wrap(~ Year) +
  scale_shape_manual(values = c("⚫", "🏀"), guide = "none") +
  scale_size_manual(values = c(2, 7), guide = "none") +
  labs(title = "Let's Go Heat! ⛹️️", x = "Points scored", y = "Rebounds", 
       caption = "Data: hoopsstats.com",
       subtitle = "Team statistics for the last 3 NBA seasons in comparison with all other teams.") +
  theme_nba(team = "Heat")
```


--------------------------------------------------------------------------------

```{r}
#| label: plot-theme-nba-pelicans
#| echo: false
#| fig-align: center
team <- "New Orleans"
ggplot(filter(data, Year %in% c("2019-2020", "2020-2021", "2021-2022")), 
       aes(x = Pts, y = Reb)) +
  geom_point(aes(shape = Team == team, size = Team == team)) +
  facet_wrap(~ Year) +
  scale_shape_manual(values = c("⚫", "🏀"), guide = "none") +
  scale_size_manual(values = c(2, 7), guide = "none") +
  labs(title = "Let's Go Pelicans! ⛹️️", x = "Points scored", y = "Rebounds", 
       caption = "Data: hoopsstats.com",
       subtitle = "Team statistics for the last 3 NBA seasons in comparison with all other teams.") +
  theme_nba(team = "Pelicans")
```


--------------------------------------------------------------------------------

```{r}
#| label: plot-theme-nba-hornets
#| echo: false
#| fig-align: center
team <- "Charlotte"
ggplot(filter(data, Year %in% c("2019-2020", "2020-2021", "2021-2022")), 
       aes(x = Pts, y = Reb)) +
  geom_point(aes(shape = Team == team, size = Team == team)) +
  facet_wrap(~ Year) +
  scale_shape_manual(values = c("⚫", "🏀"), guide = "none") +
  scale_size_manual(values = c(2, 7), guide = "none") +
  labs(title = "Let's Go Hornets! ⛹️️", x = "Points scored", y = "Rebounds", 
       caption = "Data: hoopsstats.com",
       subtitle = "Team statistics for the last 3 NBA seasons in comparison with all other teams.") +
  theme_nba(team = "Hornets")
```


--------------------------------------------------------------------------------

```{r}
#| label: plot-theme-nba-sixers
#| echo: false
#| fig-align: center
team <- "Philadelphia"
ggplot(filter(data, Year %in% c("2019-2020", "2020-2021", "2021-2022")), 
       aes(x = Pts, y = Reb)) +
  geom_point(aes(shape = Team == team, size = Team == team)) +
  facet_wrap(~ Year) +
  scale_shape_manual(values = c("⚫", "🏀"), guide = "none") +
  scale_size_manual(values = c(2, 7), guide = "none") +
  labs(title = "Let's Go 76ers! ⛹️️", x = "Points scored", y = "Rebounds", 
       caption = "Data: hoopsstats.com",
       subtitle = "Team statistics for the last 3 NBA seasons in comparison with all other teams.") +
  theme_nba(team = "Sixers")
```


--------------------------------------------------------------------------------

```{r}
#| label: plot-theme-nba-timberwolves
#| echo: false
#| fig-align: center
team <- "Milwaukee"
ggplot(filter(data, Year %in% c("2019-2020", "2020-2021", "2021-2022")), 
       aes(x = Pts, y = Reb)) +
  geom_point(aes(shape = Team == team, size = Team == team)) +
  facet_wrap(~ Year) +
  scale_shape_manual(values = c("⚫", "🏀"), guide = "none") +
  scale_size_manual(values = c(2, 7), guide = "none") +
  labs(title = "Let's Go Timberwolves! ⛹️️", x = "Points scored", y = "Rebounds", 
       caption = "Data: hoopsstats.com",
       subtitle = "Team statistics for the last 3 NBA seasons in comparison with all other teams.") +
  theme_nba(team = "Timberwolves")
```


--------------------------------------------------------------------------------

```{r}
#| label: plot-theme-nba-suns
#| echo: false
#| fig-align: center
team <- "Phoenix"
ggplot(filter(data, Year %in% c("2019-2020", "2020-2021", "2021-2022")), 
       aes(x = Pts, y = Reb)) +
  geom_point(aes(shape = Team == team, size = Team == team)) +
  facet_wrap(~ Year) +
  scale_shape_manual(values = c("⚫", "🏀"), guide = "none") +
  scale_size_manual(values = c(2, 7), guide = "none") +
  labs(title = "Let's Go Suns! ⛹️️", x = "Points scored", y = "Rebounds", 
       caption = "Data: hoopsstats.com",
       subtitle = "Team statistics for the last 3 NBA seasons in comparison with all other teams.") +
  theme_nba(team = "Suns")
```
