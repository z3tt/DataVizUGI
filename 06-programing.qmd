---
title: "The Art & Science of <br>Data Visualization "
subtitle: "<span style='font-size:1.5em;'>Engaging and Reproducible Graphics with ggplot2</span><br><span style='font-weight:500;font-size:1.3em;'>Efficiency with Functional Programing</span></span>"
author: "<b style='color:#28a87d;'><a href='https://www.cedricscherer.com'>Dr. Cédric Scherer</a></b>&ensp;**//**&ensp;RTG-UGI Workshop&ensp;**//**&ensp;October 2023"
format:
  revealjs:
    theme: slides.scss
    logo: img/logo.png
    footer: '**[Cédric Scherer](https://cedricscherer.com)** // Data Visualization & Information Design'
    transition: fade
    progress: true
    multiplex: false
    preview-links: true
    scrollable: false
    hide-inactive-cursor: true
    highlight-style: printing
    chalkboard:
      theme: whiteboard
      boardmarker-width: 4
      buttons: true
    pause: true
    mainfont: Asap SemiCondensed
editor: source
knitr:
  opts_chunk:
    dev: "ragg_png"
    retina: 3
    dpi: 200
execute:
  freeze: auto
  cache: true
  echo: true
  fig-width: 5
  fig-height: 6
---


## Setup

```{r}
#| label: prep
#| cache: false
library(ggplot2)
library(dplyr)

bikes <- readr::read_csv(
  here::here("data", "london-bikes-custom.csv"),
  col_types = "Dcfffilllddddc"
)

bikes$season <- forcats::fct_inorder(bikes$season)

theme_set(theme_light(base_size = 14, base_family = "Asap SemiCondensed"))

theme_update(
  panel.grid.minor = element_blank(),
  plot.title = element_text(face = "bold"),
  plot.title.position = "plot"
)
```


# Programming <br>with ggplot2


## Conditional Components

```{r}
#| label: conditional-components
#| eval: false
#| purl: false
#| code-line-numbers: "1|3,4,5|4"
smooth <- TRUE

ggplot(bikes, aes(x = temp, y = humidity)) +
  { if(smooth) geom_smooth(color = "red") } +
  geom_point(alpha = .5)
```


## Conditional Components

```{r}
#| label: conditional-components-1
#| fig-width: 8
#| fig-height: 5
#| fig-align: center
smooth <- TRUE

ggplot(bikes, aes(x = temp, y = humidity)) +
  { if(smooth) geom_smooth(color = "red") } +
  geom_point(alpha = .5)
```


## Conditional Components

```{r}
#| label: conditional-components-2
#| fig-width: 8
#| fig-height: 5
#| fig-align: center
#| code-line-numbers: "1"
smooth <- FALSE

ggplot(bikes, aes(x = temp, y = humidity)) +
  { if(smooth) geom_smooth(color = "red") } +
  geom_point(alpha = .5)
```


## Wrapper Functions for Plots

```{r}
#| label: conditional-components-function
#| code-line-numbers: "1,5|2,3,4"
draw_scatter <- function(smooth = TRUE) {
  ggplot(bikes, aes(x = temp, y = humidity)) +
    { if(smooth) geom_smooth(color = "red") } +
    geom_point(alpha = .5)
}
```


## Wrapper Functions for Plots

```{r}
#| label: conditional-components-function-plot-default
#| output-location: column
#| fig-width: 5
#| fig-height: 6
draw_scatter()
```


## Wrapper Functions for Plots

```{r}
#| label: conditional-components-function-plot-false
#| output-location: column
#| fig-width: 5
#| fig-height: 6
draw_scatter(smooth = FALSE)
```


## Components as Functions

```{r}
#| label: function-components
#| cache: false
#| code-line-numbers: "1,2,7|3,6|4,5"
geom_scatterfit <- function(pointsize = 1, pointalpha = 1, 
                            method = "lm", linecolor = "red", ...) {
  list(
    geom_point(size = pointsize, alpha = pointalpha, ...),
    geom_smooth(method = method, color = linecolor, ...)
  )
}
```


## Components as Functions

```{r}
#| label: function-components-defaults
#| output-location: column
#| fig-width: 5
#| fig-height: 6
#| code-line-numbers: "3"
ggplot(bikes,
       aes(x = humidity, y = count)) +
  geom_scatterfit()
```


## Components as Functions

```{r}
#| label: function-components-args
#| output-location: column
#| fig-width: 5
#| fig-height: 6
#| code-line-numbers: "4,5"
ggplot(bikes,
       aes(x = humidity, y = count)) +
  geom_scatterfit(
    color = "#28A87D", 
    linewidth = 3
  )
```


## Components as Functions

```{r}
#| label: function-components-custom
#| output-location: column
#| fig-width: 5
#| fig-height: 6
#| code-line-numbers: "1,2|4,5,6,7"
ggplot(diamonds, 
       aes(x = carat, y = price)) +
  geom_scatterfit(
    pointsize = .5, 
    pointalpha = .1,
    method = "gam",
    linecolor = "#EFAC00"
  )
```


## Components as Functions

```{r}
#| label: function-components-scales
#| cache: false
#| code-line-numbers: "1,14|2,13|3,4,5,6,7|8,9,10,11,12"
scales_log <- function(sides = "xy") {
  list(
    if(stringr::str_detect(sides, "x")) {
      scale_x_log10(
        breaks = c(10^(1:100)), labels = scales::label_log()
      )
    },
    if(stringr::str_detect(sides, "y")) {
      scale_y_log10(
        breaks = c(10^(1:100)), labels = scales::label_log()
      )
    }
  )
}
```


## Components as Functions

```{r}
#| label: function-components-scales-custom
#| output-location: column
#| fig-width: 5
#| fig-height: 6
#| code-line-numbers: "9"
ggplot(diamonds, 
       aes(x = carat, y = price)) +
  geom_scatterfit(
    pointsize = .5, 
    pointalpha = .1,
    method = "gam",
    linecolor = "#EFAC00"
  ) +
  scales_log(sides = "y")
```


## Iterative Graphics

```{r}
#| label: function-iterate-monthly
#| cache: false
#| code-line-numbers: "1,11|2,3,4|5,6,7,8,9|1,4,9"
trends_monthly <- function(grp = "January") {
  bikes |> 
    dplyr::mutate(month = lubridate::month(date, label = TRUE, abbr = FALSE)) |> 
    dplyr::filter(month %in% grp) |> 
    ggplot(aes(x = temp, y = count, color = day_night)) +
    geom_point(alpha = .2, show.legend = FALSE) +
    geom_smooth(se = FALSE) +
    scale_color_manual(values = c("#FFA200", "#757bc7")) +
    labs(title = grp, x = "Temperature", y = "Bike shares", color = NULL)
}
```


## Iterative Graphics

```{r}
#| label: function-iterate-monthly-july
#| cache: false
#| output-location: column
#| fig-width: 5
#| fig-height: 6
trends_monthly("July")
```


## Iterative Graphics

```{r}
#| label: function-iterate-monthly-ranges
#| cache: false
#| code-line-numbers: "8,9,10"
trends_monthly <- function(grp = "January") {
  bikes |> 
    dplyr::mutate(month = lubridate::month(date, label = TRUE, abbr = FALSE)) |> 
    dplyr::filter(month %in% grp) |> 
    ggplot(aes(x = temp, y = count, color = day_night)) +
    geom_point(alpha = .2, show.legend = FALSE) +
    geom_smooth(se = FALSE) +
    # keep axis ranges consistent
    scale_x_continuous(limits = range(bikes$temp)) +
    scale_y_continuous(limits = range(bikes$count)) +
    scale_color_manual(values = c("#FFA200", "#757bc7")) +
    labs(title = grp, x = "Temperature", y = "Bike shares", color = NULL)
}
```


## Iterative Graphics

```{r}
#| label: function-iterate-monthly-ranges-july
#| cache: false
#| output-location: column
#| fig-width: 5
#| fig-height: 6
trends_monthly("July")
```


## Iterative Graphics

```{r}
#| label: function-iterate-monthly-ranges-purrr
#| cache: false
#| eval: false
#| purl: false
plots <- purrr::map(month.name[1:12], trends_monthly) ## also: ~ trends_monthly(.x)
```


## Iterative Graphics

```{r}
#| label: function-iterate-monthly-ranges-purrr-single
#| cache: false
#| fig-width: 8
#| fig-height: 5
#| fig-align: center
#| code-line-numbers: "2"
plots <- purrr::map(month.name[1:12], trends_monthly) ## also: ~ trends_monthly(.x)
plots[[9]]
```


## Iterative Graphics

```{r}
#| label: function-iterate-monthly-ranges-wrap
#| cache: false
#| fig-width: 18
#| fig-height: 8.5
#| fig-align: center
#| code-line-numbers: "2"
plots <- purrr::map(month.name[1:12], trends_monthly) ## also: ~ trends_monthly(.x)
patchwork::wrap_plots(plots)
```


## Iterative Graphics

```{r}
#| label: function-density
#| cache: false
#| code-line-numbers: "1,11|2|3,4|5,6,7|8,9,10"
plot_density <- function(data, var, grp = "") {
  ggplot(data, aes(x = !!sym(var))) +
    geom_density(aes(fill = !!sym(grp)), position = "identity",
                 color = "grey30", alpha = .3) +
    coord_cartesian(expand = FALSE, clip = "off") +
    scale_y_continuous(labels = scales::label_number()) +
    scale_fill_brewer(palette = "Dark2", name = NULL) +
    theme(legend.position = "top")
}
```


## Iterative Graphics

```{r}
#| label: function-density-plot
#| cache: false
#| output-location: column
#| fig-width: 5
#| fig-height: 6
plot_density(
  bikes, "count"
)
```


## Iterative Graphics

```{r}
#| label: function-density-plot-grp
#| cache: false
#| fig-width: 14
#| fig-height: 6.5
#| fig-align: center
#| code-line-numbers: "1,2,3,4|2|3|5"
plots <- purrr::map(
  c("count", "temp", "humidity", "wind_speed"), 
  ~ plot_density(data = bikes, var = .x, grp = "day_night")
)
patchwork::wrap_plots(plots, nrow = 1)
```


## Iterative Graphics

```{r}
#| label: function-density-plot-midwest
#| cache: false
#| fig-width: 20
#| fig-height: 9
#| fig-align: center
#| code-line-numbers: "2|3|5"
plots <- purrr::map(
  names(dplyr::select(midwest, where(is.numeric))),
  ~plot_density(data = midwest, var = .x)
)
patchwork::wrap_plots(plots)
```



# Exercise



## Exercise

::: question
-  **Create a function that plots the famous Gapminder chart, highlighting one of the continents.**
   -  Extend the following code in to annotate a continent your choice of with {ggforce}.
   -  Turn the code into a function with the utility to annotate any continent.
   -  Optional: Create a second function to highlight a country.
:::


--------------------------------------------------------------------------------

```{r}
#| label: gapminder-plot-template
#| eval: false
#| purl: false
#| code-line-numbers: "1|3|5|6,7,8|9,10,11,12|13,14,15,16,17|18|19,20"
# install.packages("gapminder")

(gm2007 <- filter(gapminder::gapminder, year == 2007))

ggplot(gm2007, aes(x = gdpPercap, y = lifeExp)) +
  geom_point( 
    aes(size = pop), alpha = .5
  ) +
  scale_x_log10(
    breaks = c(500, 2000, 8000, 32000),
    labels = scales::label_dollar(accuracy = 1)
  ) +
  scale_size(
    range = c(1, 12), name = "Population:", 
    breaks = c(10, 100, 1000)*1000000, 
    labels = scales::label_comma(scale = 1 / 10^6, suffix = "M")
  ) +
  labs(x = "GDP per capita", y = "Life expectancy") +
  theme_minimal(base_family = "Asap SemiCondensed") +
  theme(panel.grid.minor = element_blank())
```

--------------------------------------------------------------------------------

```{r}
#| label: gapminder-plot-template
#| echo: false
#| purl: false
```



# Solution Exercise 1 {background-color="#e6d9f2"}



## Gapminder Bubble Chart

```{r}
#| label: exercise-2-2-gapminder-0-template
#| eval: false
#| purl: false
#| cache: false
#| code-line-numbers: "1|3,4,5|7|9,10,11,12|13,14,15,16|17,18,19,20,21|22|23,24"
# install.packages("gapminder")

library(gapminder)
library(dplyr)
library(ggplot2)

gm2007 <- filter(gapminder, year == 2007)

ggplot(gm2007, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(
    aes(size = pop), alpha = .5
  ) +
  scale_x_log10(
    breaks = c(500, 2000, 8000, 32000),
    labels = scales::label_dollar(accuracy = 1)
  ) +
  scale_size(
    range = c(1, 12), name = "Population:", 
    breaks = c(10, 100, 1000)*1000000, 
    labels = scales::label_comma(scale = 1 / 10^6, suffix = "M")
  ) +
  labs(x = "GDP per capita", y = "Life expectancy") +
  theme_minimal(base_family = "Asap SemiCondensed", base_size = 15) +
  theme(panel.grid.minor = element_blank())
```

--------------------------------------------------------------------------------

```{r}
#| label: exercise-2-2-gapminder-0-template
#| echo: false
```


## Annotate Continents

```{r}
#| label: exercise-2-2-gapminder-1-geom-hull
#| eval: false
#| purl: false
#| code-line-numbers: "2,3,4|5,6,7,8|6|9,10,11,12,13|10"
ggplot(gm2007, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(
    aes(size = pop), alpha = .5, color = "grey60"
  ) +
  geom_point( 
    data = filter(gm2007, continent == "Americas"),
    aes(size = pop), shape = 1, stroke = .7
  ) +
  ggforce::geom_mark_hull(
    aes(label = continent, filter = continent == "Americas"),
    expand = unit(10, "pt"), con.cap = unit(1, "mm"),
    label.family = "Asap SemiCondensed", label.fontsize = 15
  ) +
  scale_x_log10(
    breaks = c(500, 2000, 8000, 32000),
    labels = scales::label_dollar(accuracy = 1)
  ) +
  scale_size(
    range = c(1, 12), name = "Population:",
    breaks = c(10, 100, 1000)*1000000,
    labels = scales::label_comma(scale = 1 / 10^6, suffix = "M")
  ) +
  labs(x = "GDP per capita", y = "Life expectancy") +
  theme_minimal(base_family = "Asap SemiCondensed", base_size = 15) +
  theme(panel.grid.minor = element_blank())
```

--------------------------------------------------------------------------------

```{r}
#| label: exercise-2-2-gapminder-1-geom-hull
#| echo: false
```


## Function to Highlight a Continent

```{r}
#| label: exercise-2-2-gapminder-2-function-continent
#| cache: false
#| code-line-numbers: "1,29|8,12"
draw_gp_continent <- function(grp) {
  
  ggplot(gm2007, aes(x = gdpPercap, y = lifeExp)) + 
    geom_point( 
      aes(size = pop), alpha = .5, color = "grey60"
    ) +
    geom_point( 
      data = filter(gm2007, continent == grp),
      aes(size = pop), shape = 1, stroke = .7
    ) +
    ggforce::geom_mark_hull(
      aes(label = continent, filter = continent == grp),
      expand = unit(10, "pt"), con.cap = unit(1, "mm"),
      label.family = "Asap SemiCondensed", label.fontsize = 15
    ) +
    scale_x_log10(
      breaks = c(500, 2000, 8000, 32000),
      labels = scales::label_dollar(accuracy = 1)
    ) +
    scale_size(
      range = c(1, 12), name = "Population:", 
      breaks = c(10, 100, 1000)*1000000, 
      labels = scales::label_comma(scale = 1 / 10^6, suffix = "M")
    ) +
    labs(x = "GDP per capita", y = "Life expectancy") +
    theme_minimal(base_family = "Asap SemiCondensed", base_size = 15) +
    theme(panel.grid.minor = element_blank())
  
}
```


--------------------------------------------------------------------------------

```{r}
#| label: exercise-2-2-gapminder-3-example-americas
draw_gp_continent("Americas")
```


--------------------------------------------------------------------------------

```{r}
#| label: exercise-2-2-gapminder-4-example-africa
draw_gp_continent("Africa")
```


--------------------------------------------------------------------------------

```{r}
#| label: exercise-2-2-gapminder-5-example-europe
draw_gp_continent("Europe")
```


## Function to Highlight a Country

```{r}
#| label: exercise-2-2-gapminder-6-function-country
#| cache: false
#| code-line-numbers: "1,30|7,8,9,10,11,12|8|9,10|13,14,15,16|14|15"
draw_gp_country <- function(grp) {
  
  ggplot(gm2007, aes(x = gdpPercap, y = lifeExp)) + 
    geom_point( 
      aes(size = pop), alpha = .5, color = "grey60"
    ) +
    ggforce::geom_mark_circle(
      aes(label = country, filter = country == grp),
      expand = unit(15, "pt"), con.cap = unit(0, "mm"),
      # expand = unit(0, "pt"), con.cap = unit(0, "mm"),
      label.family = "Asap SemiCondensed", label.fontsize = 15
    ) +
    geom_point( 
      data = filter(gm2007, country == grp),
      aes(size = pop), color = "#9C55E3", show.legend = FALSE
    ) +
    scale_x_log10(
      breaks = c(500, 2000, 8000, 32000),
      labels = scales::label_dollar(accuracy = 1)
    ) +
    scale_size(
      range = c(1, 12), name = "Population:", 
      breaks = c(10, 100, 1000)*1000000, 
      labels = scales::label_comma(scale = 1 / 10^6, suffix = "M")
    ) +
    labs(x = "GDP per capita", y = "Life expectancy") +
    theme_minimal(base_family = "Asap SemiCondensed", base_size = 15) +
    theme(panel.grid.minor = element_blank())
  
}
```


--------------------------------------------------------------------------------

```{r}
#| label: exercise-2-2-gapminder-7-example-usa
draw_gp_country("United States")
```


--------------------------------------------------------------------------------

```{r}
#| label: exercise-2-2-gapminder-8-example-germany
draw_gp_country("Germany")
```


--------------------------------------------------------------------------------

```{r}
#| label: exercise-2-2-gapminder-9-example-india
draw_gp_country("India")
```


--------------------------------------------------------------------------------

```{r}
#| label: exercise-2-2-gapminder-10-example-zambia
draw_gp_country("Zambia")
```

